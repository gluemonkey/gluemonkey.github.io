{"version":3,"sources":["../../dist/index.es.js","App.js","serviceWorker.js","index.js"],"names":["index_es_classCallCheck","instance","Constructor","TypeError","index_es_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_extends","assign","arguments","source","hasOwnProperty","call","index_es_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","index_es_possibleConstructorReturn","self","ReferenceError","index_es_CircleElement","initalSegmentConfig","animatedSegmentConfig","animatedIn","animationDuration","circleProps","obj","keys","indexOf","index_es_objectWithoutProperties","baseStyles","transitionProperty","transitionDuration","transitionDelay","transitionTimingFunction","toStyles","strokeDasharray","dasharray","strokeDashoffset","dashoffset","fromStyles","calcStyles","node_modules_react_default","a","createElement","style","propTypes","prop_types_default","shape","string","rotation","number","color","isRequired","bool","calcSegmentConfig","percent","offset","seperatorPercentage","showSeperator","mainSegPercentage","Math","max","index_es_DonutChartSegment","_Component","DonutChartSegment","this","_this","getPrototypeOf","state","animate","_this2","_props","fromPercent","setTimeout","setState","prevProps","prevState","snapshot","_this3","_props2","fromOffset","lineWidth","segmentStyle","segmentShown","initialSegmentConfig","toSegmentConfig","groupRotate","segmentContainerStyle","transformOrigin","opacity","transform","cx","cy","r","fill","stroke","strokeWidth","node_modules_react","oneOf","add","b","LabelContainerStyle","display","flexDirection","justifyContent","alignItems","position","top","left","width","height","CircleBoxStyle","padding","SVGStyle","index_es_segmentShown","segment","filters","includes","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","hiddenSegmentCount","total","map","seg","reduce","forEach","eachSectionGets","segPercent","push","shown","index_es_DonutChart","DonutChart","oldSegments","isInital","className","dropShadow","children","newsegmentObjects","oldSegmentObjects","idx","relatedNewObj","relatedOldObj","viewBox","id","fx","fy","stopColor","stopOpacity","segmentObject","delay","segId","defaultProps","oneOfType","array","object","index_es","segmentCats","ToggleButton","_ref","active","restProps","objectWithoutProperties","react_default","App","segmentConfig","notFiltered","tag","findIndex","filter","setFilter","val","concat","toggleChartType","newSegmentConfig","_this$state","App_ToggleButton","onClick","Component","Boolean","window","location","hostname","match","require","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad0f6e66.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar CircleElement = function CircleElement(props) {\n  var initalSegmentConfig = props.initalSegmentConfig,\n      animatedSegmentConfig = props.animatedSegmentConfig,\n      animatedIn = props.animatedIn,\n      animationDuration = props.animationDuration,\n      circleProps = objectWithoutProperties(props, ['initalSegmentConfig', 'animatedSegmentConfig', 'animatedIn', 'animationDuration']);\n  var baseStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: animationDuration + ', 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear'\n  };\n\n  var toStyles = _extends({}, baseStyles, {\n    strokeDasharray: animatedSegmentConfig.dasharray,\n    strokeDashoffset: animatedSegmentConfig.dashoffset\n  });\n\n  var fromStyles = _extends({}, baseStyles, {\n    strokeDasharray: initalSegmentConfig.dasharray,\n    strokeDashoffset: initalSegmentConfig.dashoffset\n  });\n\n  var calcStyles = animatedIn ? toStyles : fromStyles;\n  return React.createElement('circle', _extends({}, circleProps, {\n    style: calcStyles\n  }));\n};\n\nCircleElement.propTypes = {\n  initalSegmentConfig: PropTypes.shape({\n    dasharray: PropTypes.string,\n    rotation: PropTypes.number,\n    dashoffset: PropTypes.string,\n    color: PropTypes.string\n  }).isRequired,\n  animatedSegmentConfig: PropTypes.shape({\n    dasharray: PropTypes.string,\n    rotation: PropTypes.number,\n    dashoffset: PropTypes.string,\n    color: PropTypes.string\n  }).isRequired,\n  animationDuration: PropTypes.string,\n  animatedIn: PropTypes.bool.isRequired\n};\n\nvar calcSegmentConfig = function calcSegmentConfig(percent, offset, props) {\n  var color = props.color,\n      showSeperator = props.showSeperator;\n  var segmentOffset = 25;\n  var seperatorPercentage = showSeperator ? 0.7 : 0;\n  var mainSegPercentage = Math.max(0, percent - seperatorPercentage);\n  return {\n    dasharray: mainSegPercentage + ' ' + (100 - mainSegPercentage),\n    rotation: (offset + segmentOffset) / 100 * 360,\n    dashoffset: '0',\n    color: color\n  };\n};\n\nvar DonutChartSegment = function (_Component) {\n  inherits(DonutChartSegment, _Component);\n\n  function DonutChartSegment(props) {\n    classCallCheck(this, DonutChartSegment);\n\n    var _this = possibleConstructorReturn(this, (DonutChartSegment.__proto__ || Object.getPrototypeOf(DonutChartSegment)).call(this, props));\n\n    _this.state = {\n      animate: false\n    };\n    return _this;\n  }\n\n  createClass(DonutChartSegment, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _props = this.props,\n          percent = _props.percent,\n          fromPercent = _props.fromPercent;\n\n      if (percent !== fromPercent) {\n        setTimeout(function () {\n          _this2.setState({\n            animate: true\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this3 = this;\n\n      if (this.props.percent !== prevProps.percent && this.props.percent !== this.props.fromPercent) {\n        setTimeout(function () {\n          _this3.setState({\n            animate: true\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          percent = _props2.percent,\n          fromPercent = _props2.fromPercent,\n          fromOffset = _props2.fromOffset,\n          offset = _props2.offset,\n          lineWidth = _props2.lineWidth,\n          animationDuration = _props2.animationDuration,\n          segmentStyle = _props2.segmentStyle,\n          segmentShown = _props2.segmentShown;\n      var animate = this.state.animate;\n      var initialSegmentConfig = calcSegmentConfig(fromPercent, fromOffset, this.props);\n      var toSegmentConfig = calcSegmentConfig(percent, offset, this.props);\n      var groupRotate = animate ? toSegmentConfig.rotation : initialSegmentConfig.rotation;\n      var segmentContainerStyle = {\n        transformOrigin: 'center 50%',\n        transitionProperty: segmentShown ? 'all, opacity' : 'all, opacity',\n        transitionDuration: segmentShown ? animationDuration + ', 0s' : animationDuration + ', 0s',\n        transitionDelay: segmentShown ? '0s, 0s' : '0s, ' + animationDuration,\n        transitionTimingFunction: 'linear',\n        opacity: segmentShown ? 1 : 0,\n        transform: animate ? 'rotate(' + toSegmentConfig.rotation + 'deg)' : 'rotate(' + initialSegmentConfig.rotation + 'deg)'\n      };\n      return React.createElement('g', {\n        style: segmentContainerStyle,\n        transform: 'rotate(' + groupRotate + ' 21 21)'\n      }, React.createElement(CircleElement, {\n        cx: '21',\n        cy: '21',\n        r: '15.91549430918953357688837633725143',\n        fill: 'transparent',\n        stroke: toSegmentConfig.color,\n        animatedIn: animate,\n        strokeWidth: lineWidth,\n        initalSegmentConfig: initialSegmentConfig,\n        animationDuration: animationDuration,\n        animatedSegmentConfig: toSegmentConfig\n      }), segmentStyle === 'raised' && React.createElement(CircleElement, {\n        cx: '21',\n        cy: '21',\n        r: '15.91549430918953357688837633725143',\n        fill: 'transparent',\n        stroke: 'url(#grad1)',\n        animatedIn: animate,\n        strokeWidth: lineWidth,\n        initalSegmentConfig: initialSegmentConfig,\n        animationDuration: animationDuration,\n        animatedSegmentConfig: toSegmentConfig\n      }));\n    }\n  }]);\n  return DonutChartSegment;\n}(Component);\n\nDonutChartSegment.propTypes = {\n  percent: PropTypes.number.isRequired,\n  fromPercent: PropTypes.number.isRequired,\n  offset: PropTypes.number.isRequired,\n  fromOffset: PropTypes.number.isRequired,\n  lineWidth: PropTypes.number,\n  animationDuration: PropTypes.string,\n  segmentStyle: PropTypes.oneOf(['flat', 'raised']),\n  segmentShown: PropTypes.bool\n};\n\nvar add = function add(a, b) {\n  return a + b;\n};\n\nvar sum = function sum(value) {\n  return value.reduce(add);\n};\n\nvar LabelContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '100%'\n};\nvar CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 94% 30px'\n};\nvar SVGStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\n\nvar segmentShown = function segmentShown(segment, filters) {\n  return segment.value === 0 || filters.includes(segment.key);\n};\n\nvar getSegmentConfigs = function getSegmentConfigs(segments, filters) {\n  var segmentObjects = [];\n  var segmentPercentage = 0;\n  var remainderPercentage = 0;\n  var hiddenSegmentCount = 0;\n  var total = sum(segments.map(function (seg) {\n    return seg.value;\n  }));\n  segments.forEach(function (segment) {\n    var value = segment.value;\n    var percent = value / total * 100;\n\n    if (segmentShown(segment, filters)) {\n      remainderPercentage += percent;\n      hiddenSegmentCount += 1;\n    }\n  });\n  var eachSectionGets = remainderPercentage / (segments.length - hiddenSegmentCount);\n  segments.forEach(function (segment) {\n    var value = segment.value,\n        color = segment.color;\n    var percent = value / total * 100;\n    var segPercent = eachSectionGets + percent;\n\n    if (segmentShown(segment, filters)) {\n      segPercent = 0;\n    }\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      showSeperator: hiddenSegmentCount < segments.length - 1,\n      shown: !segmentShown(segment, filters)\n    });\n    segmentPercentage += segPercent;\n  });\n  return segmentObjects;\n};\n\nvar DonutChart = function (_Component) {\n  inherits(DonutChart, _Component);\n\n  function DonutChart(props) {\n    classCallCheck(this, DonutChart);\n\n    var _this = possibleConstructorReturn(this, (DonutChart.__proto__ || Object.getPrototypeOf(DonutChart)).call(this, props));\n\n    _this.state = {\n      segments: props.segments,\n      oldSegments: props.segments,\n      filters: [],\n      isInital: true\n    };\n    return _this;\n  }\n\n  createClass(DonutChart, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          className = _props.className,\n          lineWidth = _props.lineWidth,\n          dropShadow = _props.dropShadow,\n          filters = _props.filters,\n          segmentStyle = _props.segmentStyle,\n          animationDuration = _props.animationDuration,\n          children = _props.children;\n      var newsegmentObjects = getSegmentConfigs(this.state.segments, filters);\n      var oldSegmentObjects = getSegmentConfigs(this.state.oldSegments, filters);\n      var segmentObjects = []; // this means one was removed or it stayed same so merge new into old with old getting 0 percent\n\n      segmentObjects = oldSegmentObjects.length >= newsegmentObjects.length ? oldSegmentObjects.map(function (seg, idx) {\n        var relatedNewObj = newsegmentObjects[idx] || _extends({}, seg, {\n          offset: 100,\n          percent: 0,\n          shown: false\n        });\n\n        return _extends({}, seg, relatedNewObj, {\n          fromOffset: seg.offset,\n          fromPercent: seg.percent\n        });\n      }) : newsegmentObjects.map(function (seg, idx) {\n        var relatedOldObj = oldSegmentObjects[idx] || _extends({}, seg, {\n          offset: 100,\n          percent: 0\n        });\n\n        return _extends({}, seg, {\n          fromOffset: relatedOldObj.offset,\n          fromPercent: relatedOldObj.percent\n        });\n      });\n      return React.createElement('div', {\n        className: className\n      }, React.createElement('div', {\n        style: CircleBoxStyle\n      }, dropShadow && React.createElement('svg', {\n        width: '100%',\n        viewBox: '0 0 42 46',\n        style: SVGStyle\n      }, React.createElement('defs', null, React.createElement('radialGradient', {\n        id: 'drop',\n        cx: '50%',\n        cy: '50%',\n        r: '100%',\n        fx: '50%',\n        fy: '50%'\n      }, React.createElement('stop', {\n        offset: '0%',\n        stopColor: '#000',\n        stopOpacity: '0.4'\n      }), React.createElement('stop', {\n        offset: '40%',\n        stopColor: '#000',\n        stopOpacity: '0'\n      }))), React.createElement('circle', {\n        cx: '16.4',\n        cy: '206',\n        className: 'shadow',\n        r: '15.91549430918954',\n        fill: 'url(#drop)',\n        stroke: 'transparent',\n        strokeWidth: '0',\n        transform: 'scale(1.3,0.2)'\n      })), React.createElement('svg', {\n        width: '100%',\n        height: '100%',\n        viewBox: '0 0 42 42',\n        style: SVGStyle\n      }, React.createElement('defs', null, React.createElement('radialGradient', {\n        id: 'grad1',\n        cx: '50%',\n        cy: '50%',\n        r: '100%',\n        fx: '50%',\n        fy: '50%'\n      }, React.createElement('stop', {\n        offset: '20%',\n        stopColor: '#000',\n        stopOpacity: '0.5'\n      }), React.createElement('stop', {\n        offset: '50%',\n        stopColor: '#000',\n        stopOpacity: '0'\n      }), React.createElement('stop', {\n        offset: '80%',\n        stopColor: '#000',\n        stopOpacity: '0.5'\n      }))), segmentObjects.map(function (segmentObject) {\n        return React.createElement(DonutChartSegment, {\n          segmentShown: segmentObject.shown,\n          percent: segmentObject.percent,\n          fromPercent: segmentObject.fromPercent,\n          offset: segmentObject.offset,\n          fromOffset: segmentObject.fromOffset,\n          delay: segmentObject.delay,\n          color: segmentObject.color,\n          segId: segmentObject.segId,\n          isInital: _this2.state.isInital,\n          segmentStyle: segmentStyle,\n          showSeperator: segmentObject.showSeperator,\n          lineWidth: lineWidth,\n          animationDuration: animationDuration\n        });\n      })), React.createElement('div', {\n        style: LabelContainerStyle\n      }, children)));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      return _extends({}, state, {\n        filters: props.filters,\n        segments: props.segments,\n        oldSegments: state.segments\n      });\n    }\n  }]);\n  return DonutChart;\n}(Component);\n\nDonutChart.defaultProps = {\n  animationDuration: '0.2s',\n  lineWidth: 9,\n  dropShadow: false,\n  segmentStyle: 'flat',\n  filters: []\n};\nDonutChart.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  segments: PropTypes.array.isRequired,\n  lineWidth: PropTypes.number,\n  dropShadow: PropTypes.bool,\n  filters: PropTypes.array,\n  animationDuration: PropTypes.string,\n  segmentStyle: PropTypes.oneOf(['flat', 'raised'])\n};\nexport default DonutChart;","import React, { Component } from 'react'\nimport DonutChart from 'react-donut-hole'\n\nconst fillingSegments = [\n  {key: 'Plain', value: 80, color: 'tan'},\n  {key: 'Raspberry Filled', value: 80, color: 'red'},\n  {key: 'Blueberry Filled', value: 80, color: 'blue'}\n]\n\nconst shapeSegments = [\n  {key: 'Round', value: 90, color: 'red'},\n  {key: 'Long', value: 80, color: 'green'},\n]\n\nconst toppingSegments = [\n  {key: 'Plain', value: 90, color: 'tan'},\n  {key: 'Pink Frosting', value: 80, color: 'pink'},\n  {key: 'Maple Frosting', value: 20, color: 'brown'},\n  {key: 'Grape Frosting', value: 10, color: 'purple'}\n]\n\nconst segmentCats = [fillingSegments, shapeSegments, toppingSegments]\n\nconst ToggleButton = ({children, active, ...restProps}) => <div className={active ? 'toggle -active' : 'toggle -inactive'} {...restProps}>{children}</div>\n\nexport default class App extends Component {\n  state = {\n    filters: [],\n    segmentConfig: 2\n  }\n\n  notFiltered = (tag) => this.state.filters.findIndex((filter) => tag === filter) === -1\n  \n  setFilter = (key) => {\n    const filters = this.state.filters.includes(key) ? \n      this.state.filters.filter((val) => val !== key) \n      : this.state.filters.concat(key)\n    this.setState({filters})\n  }\n\n  toggleChartType = () => {\n    const { segmentConfig } = this.state;\n    const newSegmentConfig = segmentConfig === segmentCats.length -1 ? 0 : segmentConfig + 1;\n    this.setState({segmentConfig: newSegmentConfig, filters: []});\n  }\n\n  render () {\n    const { filters, segmentConfig } = this.state;\n    return (\n      <div>\n        {segmentConfig == 0  &&\n          <div className={'toggleButtonRow'}>\n            <ToggleButton active={this.notFiltered('Plain')} onClick={() => this.setFilter('Plain')}>Plain</ToggleButton>\n            <ToggleButton active={this.notFiltered('Raspberry Filled')} onClick={() => this.setFilter('Raspberry Filled')}>Raspberry Filled</ToggleButton>\n            <ToggleButton active={this.notFiltered('Blueberry Filled')} onClick={() => this.setFilter('Blueberry Filled')}>Blueberry Filled</ToggleButton>\n          </div>\n        }\n        {segmentConfig == 1  &&\n          <div className={'toggleButtonRow'}>\n            <ToggleButton active={this.notFiltered('Round')} onClick={() => this.setFilter('Round')}>Round</ToggleButton>\n            <ToggleButton active={this.notFiltered('Long')} onClick={() => this.setFilter('Long')}>Long</ToggleButton>\n          </div>\n        }\n        {segmentConfig == 2  &&\n          <div className={'toggleButtonRow'}>\n            <ToggleButton active={this.notFiltered('Plain')} onClick={() => this.setFilter('Plain')}>Plain</ToggleButton>\n            <ToggleButton active={this.notFiltered('Pink Frosting')} onClick={() => this.setFilter('Pink Frosting')}>Pink Frosting</ToggleButton>\n            <ToggleButton active={this.notFiltered('Maple Frosting')} onClick={() => this.setFilter('Maple Frosting')}>Maple Frosting</ToggleButton>\n            <ToggleButton active={this.notFiltered('Grape Frosting')} onClick={() => this.setFilter('Grape Frosting')}>Grape Frosting</ToggleButton>\n          </div>\n        }\n        <div className={'toggleButtonRow'}>\n          <div className={'toggle -chart-type'} onClick={() => this.toggleChartType()}>Toggle Chart Type</div>\n        </div>\n        <div className={'chartContainer'}>\n          <DonutChart \n            segments={segmentCats[segmentConfig]} \n            filters={filters}\n            segmentStyle={'raised'}\n            dropShadow>\n            Raised Chart\n          </DonutChart>\n        </div>\n        <div className={'chartContainer'}>\n          <DonutChart \n            segments={segmentCats[segmentConfig]} \n            filters={filters}\n            segmentStyle={'flat'}>\n            Flat Chart\n          </DonutChart>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('core-js/shim');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}